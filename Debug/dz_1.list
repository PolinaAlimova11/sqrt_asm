
dz_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000000a4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080001d4  080001dc  000101dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080001d4  080001d4  000101dc  2**0
                  CONTENTS
  4 .ARM          00000000  080001d4  080001d4  000101dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080001d4  080001dc  000101dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080001d4  080001d4  000101d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000101dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080001dc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080001dc  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101dc  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000007f  00000000  00000000  00010205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00000022  00000000  00000000  00010284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000012  00000000  00000000  000102a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000028  00000000  00000000  000102b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00000054  00000000  00000000  000102e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000020  00000000  00000000  00010338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080001bc 	.word	0x080001bc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080001bc 	.word	0x080001bc

08000170 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000170:	480f      	ldr	r0, [pc, #60]	; (80001b0 <end_pr+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000172:	4685      	mov	sp, r0

08000174 <loop>:
/* Call the clock system initialization function.*/


loop:
	// основная программа
	ldr r0, =30206016	// загружаем значение для вычисления
 8000174:	480f      	ldr	r0, [pc, #60]	; (80001b4 <end_pr+0x8>)
	// корень должен быть 15 263
	bl loop_sqrt		// переходим в подпрограмму вычисления корня
 8000176:	f000 f801 	bl	800017c <loop_sqrt>

	b	end_pr			// переходим в пустой бесконечный цикл
 800017a:	e017      	b.n	80001ac <end_pr>

0800017c <loop_sqrt>:
						// чтобы больше не выполнять действия
						// здесь может быть продолжение основной программыпрограммы


loop_sqrt:
		push {r2}		// выгружаем в стек данные из используемых регистров
 800017c:	b404      	push	{r2}
		push {r3}
 800017e:	b408      	push	{r3}
		push {r4}
 8000180:	b410      	push	{r4}

		mov r2, r0		//регист с первым опорным значением
 8000182:	4602      	mov	r2, r0
		mov r3, #1		// регистр с нечетными числами
 8000184:	f04f 0301 	mov.w	r3, #1
		mov r4, #0		// регистр, куда записывается количество иттераций = корню числа
 8000188:	f04f 0400 	mov.w	r4, #0

0800018c <wh_sqrt>:


wh_sqrt:				// цикл вычитания нечетных чисел
		subs r2, r3		// если разность неположительна, то досчитали до конца
 800018c:	1ad2      	subs	r2, r2, r3
		it LS
 800018e:	bf98      	it	ls
		bls prov		// переходим на шаг проверки 0 или отриц. значения
 8000190:	e004      	bls.n	800019c <prov>

		add r3, #2		// иначе увеличиваем нечетное число
 8000192:	f103 0302 	add.w	r3, r3, #2
		add r4, #1		// записываем в счетчик операций ещё один шаг
 8000196:	f104 0401 	add.w	r4, r4, #1


 		b	wh_sqrt
 800019a:	e7f7      	b.n	800018c <wh_sqrt>

0800019c <prov>:

prov:	subs r2, #0		// проверка для случаев, когда число больше целочисленного квадрата
 800019c:	3a00      	subs	r2, #0
						// тогда вычитание нечетных чисел даст отрицательное значение
						// последнее вычитание не нужно считать
		it EQ
 800019e:	bf08      	it	eq
		addeq r4, #1	// если это ноль, значит в r0 был ровный квадрат
 80001a0:	3401      	addeq	r4, #1
						// нужно посчитать ещё одну иттерацию

		mov r1, r4		// записываем в регистр r1 полученное значение
 80001a2:	4621      	mov	r1, r4

		pop {r4}		// выгружаем данные из стека
 80001a4:	bc10      	pop	{r4}
		pop {r3}
 80001a6:	bc08      	pop	{r3}
		pop {r2}
 80001a8:	bc04      	pop	{r2}

		bx lr			// возвращаемся в основную программу
 80001aa:	4770      	bx	lr

080001ac <end_pr>:



end_pr:			// бесконечный цикл по окончанию вычисления, чтобы не производить счет дальше

		b end_pr
 80001ac:	e7fe      	b.n	80001ac <end_pr>
 80001ae:	0000      	.short	0x0000
  ldr   r0, =_estack
 80001b0:	20005000 	.word	0x20005000
	ldr r0, =30206016	// загружаем значение для вычисления
 80001b4:	01cce840 	.word	0x01cce840

080001b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001b8:	e7fe      	b.n	80001b8 <ADC1_2_IRQHandler>
	...

080001bc <_init>:
 80001bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80001be:	bf00      	nop
 80001c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80001c2:	bc08      	pop	{r3}
 80001c4:	469e      	mov	lr, r3
 80001c6:	4770      	bx	lr

080001c8 <_fini>:
 80001c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80001ca:	bf00      	nop
 80001cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80001ce:	bc08      	pop	{r3}
 80001d0:	469e      	mov	lr, r3
 80001d2:	4770      	bx	lr
